{"version":3,"sources":["components/ChatConstants.js","components/HandleMessages.js","components/Chat.js","App.js","index.js"],"names":["ChatBotName","HandleMessages","useState","sender","text","messages","setMessages","newMessage","setNewMessage","createNewChatMessage","message","addNewChatMessage","axios","method","url","data","fact","console","log","response","addNewUserMessage","e","target","value","fetchChatbotMessage","Chat","handleClose","active","messagesInputRef","useRef","useEffect","current","focus","messagesRef","length","ref","scrollTo","scrollHeight","clientHeight","executeScroll","class","style","margin","background","className","onClick","icon","faXmark","TransitionGroup","map","index","CSSTransition","timeout","classNames","placeholder","onChange","onKeyPress","key","faPaperPlane","App","openChat","setOpenChat","unmountOnExit","in","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.f416abec.chunk.js","sourcesContent":["const UserName = \"User\";\r\nconst ChatBotName = \"Cat Facts Chatbot\";\r\nconst InitialChatMessage = \"ðŸ‘‹ Hi! Send any message\";\r\n\r\nexport { UserName, ChatBotName, InitialChatMessage };\r\n","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { UserName, ChatBotName, InitialChatMessage } from \"./ChatConstants\";\r\n\r\nconst HandleMessages = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: ChatBotName, text: InitialChatMessage }\r\n  ]);\r\n  const [newMessage, setNewMessage] = useState(null);\r\n\r\n  function createNewUserMessage() {\r\n    return { sender: UserName, text: newMessage };\r\n  }\r\n\r\n  function createNewChatMessage(message) {\r\n    return { sender: ChatBotName, text: message };\r\n  }\r\n\r\n  function addNewUserMessage(e) {\r\n    if (newMessage != null) {\r\n      setMessages((messages) => [\r\n        ...messages,\r\n        createNewUserMessage(newMessage)\r\n      ]);\r\n      setNewMessage(null);\r\n      e.target.value = \"\";\r\n\r\n      fetchChatbotMessage();\r\n    }\r\n  }\r\n\r\n  function addNewChatMessage(message) {\r\n    setMessages((messages) => [...messages, createNewChatMessage(message)]);\r\n  }\r\n\r\n  async function fetchChatbotMessage() {\r\n    const url = \"https://catfact.ninja/fact\";\r\n    try {\r\n      const res = await axios({\r\n        method: \"get\",\r\n        url: url\r\n      });\r\n      addNewChatMessage(res.data.fact);\r\n    } catch (err) {\r\n      console.log(err.response);\r\n    }\r\n  }\r\n  return { messages, setNewMessage, addNewUserMessage };\r\n};\r\n\r\nexport default HandleMessages;\r\n","import \"./Chat.css\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport HandleMessages from \"./HandleMessages.js\";\r\nimport { ChatBotName } from \"./ChatConstants\";\r\n\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPaperPlane, faXmark } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst scrollToRef = (ref) =>\r\n  ref.current.scrollTo(0, ref.current.scrollHeight - ref.current.clientHeight);\r\n\r\nconst Chat = ({ handleClose, active }) => {\r\n  const { messages, setNewMessage, addNewUserMessage } = HandleMessages();\r\n\r\n  //focus on messages input\r\n  const messagesInputRef = useRef(null);\r\n  useEffect(() => {\r\n    messagesInputRef.current.focus();\r\n  }, [active]);\r\n\r\n  //Scroll to bottom of chat\r\n  const messagesRef = useRef(null);\r\n  const executeScroll = () => scrollToRef(messagesRef);\r\n  useEffect(() => {\r\n    if (messages.length > 1) executeScroll();\r\n  }, [messages]);\r\n\r\n  function handleKeyPress(e) {\r\n    if (e.key === \"Enter\") {\r\n      addNewUserMessage(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div class=\"container\">\r\n      <div>\r\n        <div class=\"header\">\r\n          <div class=\"header-logo\">\r\n            <p style={{ margin: \"0\" }}>ðŸ˜º</p>\r\n            <div\r\n              class=\"status\"\r\n              style={{ background: active ? \"#00FF00\" : \"#FF0000\" }}\r\n            ></div>\r\n          </div>\r\n          <div class=\"header-text\">\r\n            <h2>{ChatBotName}</h2>\r\n            <small>{active ? <>Online</> : <>Offline</>}</small>\r\n          </div>\r\n          <FontAwesomeIcon\r\n            className=\"close-btn\"\r\n            onClick={handleClose}\r\n            icon={faXmark}\r\n          />\r\n        </div>\r\n\r\n        <div class=\"messages\" ref={messagesRef}>\r\n          <TransitionGroup>\r\n            {messages.map((message, index) => {\r\n              return (\r\n                <CSSTransition key={index} timeout={200} classNames=\"messages\">\r\n                  <div\r\n                    class={\r\n                      message.sender === ChatBotName\r\n                        ? \"chat-message-container\"\r\n                        : \"user-message-container\"\r\n                    }\r\n                  >\r\n                    <div\r\n                      class={\r\n                        message.sender === ChatBotName\r\n                          ? \"message chat-message\"\r\n                          : \"message user-message\"\r\n                      }\r\n                    >\r\n                      {message.text}\r\n                    </div>\r\n                  </div>\r\n                </CSSTransition>\r\n              );\r\n            })}\r\n          </TransitionGroup>\r\n        </div>\r\n\r\n        <div class=\"form\">\r\n          <input\r\n            placeholder=\"Send a message...\"\r\n            onChange={(e) => setNewMessage(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            ref={messagesInputRef}\r\n          />\r\n          <FontAwesomeIcon\r\n            className=\"send-btn\"\r\n            onClick={addNewUserMessage}\r\n            icon={faPaperPlane}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","import \"./styles.css\";\nimport { useState } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport Chat from \"./components/Chat.js\";\n\nexport default function App() {\n  const [openChat, setOpenChat] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <div class=\"footer\">\n        <button\n          class=\"btn\"\n          onClick={() => setOpenChat((openChat) => !openChat)}\n        >\n          {openChat ? <p>Close Chat</p> : <p>Open Chat</p>}\n        </button>\n\n        <CSSTransition\n          unmountOnExit\n          in={openChat}\n          timeout={200}\n          classNames=\"chat\"\n        >\n          <Chat handleClose={() => setOpenChat(false)} active={openChat} />\n        </CSSTransition>\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}